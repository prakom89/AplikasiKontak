/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import controllers.KontakController;
import database.SQLiteConnection;
import java.awt.event.ItemEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import models.Kontak;

/**
 *
 * @author ACER
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    private DefaultTableModel tableModel;
    private List<Integer> listIdKontak = new ArrayList<>();

    public MainFrame() {
        initComponents();
        loadKontakKeTabel();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtNama = new javax.swing.JTextField();
        txtNomorTelepon = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmbKategori = new javax.swing.JComboBox<>();
        btnTambah = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        btnCari = new javax.swing.JButton();
        btnSimpan = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblKontak = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        btnImport = new javax.swing.JButton();
        btnEksport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Nama");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("No. Telepon");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Kategori");

        cmbKategori.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Semua", "Keluarga", "Teman", "Kerja" }));
        cmbKategori.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbKategoriItemStateChanged(evt);
            }
        });
        cmbKategori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbKategoriActionPerformed(evt);
            }
        });

        btnTambah.setText("Tambah");
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        btnCari.setText("Cari");
        btnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCariActionPerformed(evt);
            }
        });

        btnSimpan.setText("Simpan");
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(13, 13, 13))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnTambah)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSimpan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCari, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtNomorTelepon)
                    .addComponent(cmbKategori, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtNama))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNomorTelepon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbKategori, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTambah)
                    .addComponent(btnEdit)
                    .addComponent(btnHapus)
                    .addComponent(btnCari)
                    .addComponent(btnSimpan))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        tblKontak.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nama", "No. Telepon", "Kategori"
            }
        ));
        tblKontak.setCellSelectionEnabled(true);
        jScrollPane1.setViewportView(tblKontak);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("APLIKASI PENGELOLAAN KONTAK");

        btnImport.setText("Import");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        btnEksport.setText("Eksport");
        btnEksport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEksportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnImport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEksport)
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnImport)
                    .addComponent(btnEksport))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadKontakKeTabel() {
        // Tambahkan data ke tabel
        DefaultTableModel tableModel = (DefaultTableModel) tblKontak.getModel();

        // Pastikan tableModel tidak null
        if (tableModel == null) {
            System.out.println("tableModel belum diinisialisasi.");
            return;
        }

        // Bersihkan tabel sebelum memuat data baru
        tableModel.setRowCount(0);
        listIdKontak.clear();

        // Ambil data dari database
        List<Kontak> daftarKontak = KontakController.getSemuaKontak();

        if (daftarKontak == null) {
            System.out.println("Daftar kontak null.");
            return;
        }

        // Tambahkan data ke model tabel
        for (Kontak kontak : daftarKontak) {
            listIdKontak.add(kontak.getId()); // Simpan ID
            tableModel.addRow(new Object[]{
                kontak.getNama(),
                kontak.getNomorTelepon(),
                kontak.getKategori()
            });
        }

        System.out.println("Data berhasil dimuat ke tabel.");

    }

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahActionPerformed
        // Ambil data dari input field
        String nama = txtNama.getText();
        String nomorTelepon = txtNomorTelepon.getText();
        String kategori = (String) cmbKategori.getSelectedItem();

        // Validasi input
        if (nama.isEmpty() || nomorTelepon.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nama dan Nomor Telepon tidak boleh kosong!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!nomorTelepon.matches("\\d+")) {
            JOptionPane.showMessageDialog(this, "Nomor Telepon harus berisi angka!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validasi panjang nomor telepon (misalnya 10 atau 12 digit)
        if (nomorTelepon.length() != 10 && nomorTelepon.length() != 12) {
            JOptionPane.showMessageDialog(this, "Nomor Telepon harus memiliki panjang 10 atau 12 digit.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Tambahkan data ke database
        Kontak kontak = new Kontak(0, nama, nomorTelepon, kategori);
        KontakController.tambahKontak(kontak);

        // Perbarui tabel di GUI
        loadKontakKeTabel();

        System.out.println("Nama: " + nama);
        System.out.println("Nomor Telepon: " + nomorTelepon);
        System.out.println("Kategori: " + kategori);

        // Reset input field
        txtNama.setText("");
        txtNomorTelepon.setText("");
        cmbKategori.setSelectedIndex(0);

        JOptionPane.showMessageDialog(this, "Kontak berhasil ditambahkan!", "Sukses", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnTambahActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        DefaultTableModel tableModel = (DefaultTableModel) tblKontak.getModel();
        int selectedRow = tblKontak.getSelectedRow(); // Dapatkan indeks baris yang dipilih

        if (selectedRow == -1) { // Tidak ada baris yang dipilih
            JOptionPane.showMessageDialog(this, "Pilih kontak yang ingin diedit terlebih dahulu.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Ambil data dari baris yang dipilih
        // Ambil ID berdasarkan indeks baris yang dipilih
        int id = listIdKontak.get(selectedRow);
        String nama = (String) tableModel.getValueAt(selectedRow, 0);
        String nomorTelepon = (String) tableModel.getValueAt(selectedRow, 1);
        String kategori = (String) tableModel.getValueAt(selectedRow, 2);

        // Tampilkan data di input field untuk diedit
        txtNama.setText(nama);
        txtNomorTelepon.setText(nomorTelepon);
        cmbKategori.setSelectedItem(kategori);

        // Simpan ID yang akan diedit
        btnEdit.putClientProperty("idToEdit", id);
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        Integer idToEdit = (Integer) btnEdit.getClientProperty("idToEdit");

        if (idToEdit == null) {
            JOptionPane.showMessageDialog(this, "Tidak ada kontak yang dipilih untuk diedit.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Ambil data dari input field
        String nama = txtNama.getText();
        String nomorTelepon = txtNomorTelepon.getText();
        String kategori = (String) cmbKategori.getSelectedItem();

        // Validasi input
        if (nama.isEmpty() || nomorTelepon.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nama dan Nomor Telepon tidak boleh kosong.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!nomorTelepon.matches("\\d+")) {
            JOptionPane.showMessageDialog(this, "Nomor Telepon harus berupa angka.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Perbarui kontak di database
        Kontak kontak = new Kontak(idToEdit, nama, nomorTelepon, kategori);
        KontakController.updateKontak(kontak);

        // Perbarui tabel di GUI
        loadKontakKeTabel();

        // Reset input field
        txtNama.setText("");
        txtNomorTelepon.setText("");
        cmbKategori.setSelectedIndex(0);

        JOptionPane.showMessageDialog(this, "Kontak berhasil diperbarui.", "Sukses", JOptionPane.INFORMATION_MESSAGE);// TODO add your handling code here:
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        DefaultTableModel tableModel = (DefaultTableModel) tblKontak.getModel();
        int selectedRow = tblKontak.getSelectedRow(); // Ambil baris yang dipilih di tabel

        if (selectedRow == -1) { // Validasi jika tidak ada baris yang dipilih
            JOptionPane.showMessageDialog(this, "Pilih kontak yang ingin dihapus terlebih dahulu.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Konfirmasi penghapusan
        int confirm = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin menghapus kontak ini?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        try {
            // Ambil ID dari daftar ID
            int idToDelete = listIdKontak.get(selectedRow);

            // Hapus data dari database
            KontakController.hapusKontak(idToDelete);

            // Hapus data dari tabel dan daftar ID
            tableModel.removeRow(selectedRow);
            listIdKontak.remove(selectedRow);

            JOptionPane.showMessageDialog(this, "Kontak berhasil dihapus.", "Sukses", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menghapus data: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCariActionPerformed
        String keyword = JOptionPane.showInputDialog(this, "Masukkan kata kunci pencarian:", "Cari Kontak", JOptionPane.QUESTION_MESSAGE);

        if (keyword == null || keyword.trim().isEmpty()) { // Validasi input kosong
            JOptionPane.showMessageDialog(this, "Kata kunci tidak boleh kosong.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Cari data kontak berdasarkan keyword
        List<Kontak> hasilPencarian = KontakController.cariKontak(keyword);

        if (hasilPencarian.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tidak ada kontak yang ditemukan.", "Informasi", JOptionPane.INFORMATION_MESSAGE);
            loadKontakKeTabel();
        } else {
            // Tampilkan hasil pencarian di JTable
            tampilkanHasilPencarian(hasilPencarian);
        }
    }//GEN-LAST:event_btnCariActionPerformed

    private void cmbKategoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbKategoriActionPerformed

    }//GEN-LAST:event_cmbKategoriActionPerformed

    private void cmbKategoriItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbKategoriItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) { // Periksa apakah item dipilih
            String kategoriDipilih = (String) evt.getItem();

            if (kategoriDipilih.equals("Semua")) {
                // Tampilkan semua data
                loadKontakKeTabel();
            } else {
                // Tampilkan data berdasarkan kategori
                loadKontakBerdasarkanKategori(kategoriDipilih);
            }
        }
    }//GEN-LAST:event_cmbKategoriItemStateChanged

    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked
        // Panggil metode untuk memuat data penuh dari database
        loadKontakKeTabel();
    }//GEN-LAST:event_jScrollPane1MouseClicked

    private void btnEksportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEksportActionPerformed
        // Menyimpan file CSV
        String filePath = JOptionPane.showInputDialog(this, "Masukkan nama file CSV", "kontak.csv");

        if (filePath == null || filePath.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nama file tidak boleh kosong!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            // Menulis header (kolom)
            TableModel model = tblKontak.getModel();
            int columnCount = model.getColumnCount();

            for (int i = 0; i < columnCount; i++) {
                writer.write(model.getColumnName(i)); // Nama kolom
                if (i < columnCount - 1) {
                    writer.write(","); // Pisahkan dengan koma
                }
            }
            writer.newLine();

            // Menulis data baris
            int rowCount = model.getRowCount();
            for (int i = 0; i < rowCount; i++) {
                for (int j = 0; j < columnCount; j++) {
                    writer.write(model.getValueAt(i, j).toString()); // Data di setiap baris
                    if (j < columnCount - 1) {
                        writer.write(","); // Pisahkan dengan koma
                    }
                }
                writer.newLine();
            }

            JOptionPane.showMessageDialog(this, "Data berhasil diekspor ke CSV!", "Sukses", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Gagal mengekspor data: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnEksportActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Pilih file CSV");

        // Menampilkan dialog file untuk memilih file CSV
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            String filePath = fileChooser.getSelectedFile().getAbsolutePath();
            imporKontakDariCSV(filePath); // Panggil metode impor
        }
    }//GEN-LAST:event_btnImportActionPerformed

    public void imporKontakDariCSV(String filePath) {
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            String sql = "INSERT INTO kontak (nama, nomor_telepon, kategori) VALUES (?, ?, ?)";

            try (Connection conn = SQLiteConnection.connect();
                    PreparedStatement pstmt = conn.prepareStatement(sql)) {

                // Skip header (kolom)
                reader.readLine();

                while ((line = reader.readLine()) != null) {
                    String[] data = line.split(","); // Memisahkan kolom berdasarkan koma

                    if (data.length == 3) {
                        pstmt.setString(1, data[0].trim()); // Nama
                        pstmt.setString(2, data[1].trim()); // Nomor Telepon
                        pstmt.setString(3, data[2].trim()); // Kategori
                        pstmt.executeUpdate();
                    }
                }

                JOptionPane.showMessageDialog(this, "Data berhasil diimpor ke database!", "Sukses", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (IOException | SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal mengimpor data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private void loadKontakBerdasarkanKategori(String kategori) {
        // Bersihkan tabel terlebih dahulu
        DefaultTableModel tableModel = (DefaultTableModel) tblKontak.getModel();
        tableModel.setRowCount(0);

        // Ambil data dari database berdasarkan kategori
        List<Kontak> daftarKontak = KontakController.getKontakByKategori(kategori);

        // Tambahkan data ke tabel
        for (Kontak kontak : daftarKontak) {
            tableModel.addRow(new Object[]{
                kontak.getNama(),
                kontak.getNomorTelepon(),
                kontak.getKategori()
            });
        }
    }

    private void tampilkanHasilPencarian(List<Kontak> hasilPencarian) {
        // Bersihkan tabel terlebih dahulu
        DefaultTableModel tableModel = (DefaultTableModel) tblKontak.getModel();
        tableModel.setRowCount(0);

        // Tambahkan hasil pencarian ke model tabel
        for (Kontak kontak : hasilPencarian) {
            tableModel.addRow(new Object[]{
                kontak.getNama(),
                kontak.getNomorTelepon(),
                kontak.getKategori()
            });
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCari;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnEksport;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JButton btnTambah;
    private javax.swing.JComboBox<String> cmbKategori;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblKontak;
    private javax.swing.JTextField txtNama;
    private javax.swing.JTextField txtNomorTelepon;
    // End of variables declaration//GEN-END:variables
}
